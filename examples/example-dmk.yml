component:
  kind: Project
  name: Example
  machineName: example
  description: This is a example using the provided examples. See README.md.
databases:
  cassandra_dev:
    component:
      kind: Database
      name: Cassandra Dev
      machineName: cassandra_dev
      description: Example data on the cassandra cluster
    driver: cassandra
    tunnel: ""
    configuration:
      clusterList: localhost:39042
      consistency: Quorum
      keyspace: example
  example_csv_data:
    component:
      kind: Database
      name: Example CSV Data
      machineName: example_csv_data
      description: A CSV file with example data.
    driver: csv
    tunnel: ""
    configuration:
      filePath: ./dev/example.csv
  mysql_dev:
    component:
      kind: Database
      name: MySql Dev
      machineName: mysql_dev
      description: ""
    driver: mysql
    tunnel: ""
    configuration:
      credentials:
        password: example
      databaseHost: localhost
      databaseName: migration_data
      databasePort: 33306
      username: root
  names_collector:
    component:
      kind: Database
      name: Names Collector
      machineName: names_collector
      description: Collector for names.
    driver: collector
    tunnel: ""
    configuration:
      collectionKey: names_collector
migrations:
  cassandra_to_cassandra_by_name:
    component:
      kind: Migration
      name: Cassandra to Cassandra By Name
      machineName: cassandra_to_cassandra_by_name
      description: Migreate from one Cassandra table to another.
    sourceDb: cassandra_dev
    destinationDb: cassandra_dev
    sourceQuery: |
      SELECT system, name, id, description FROM migration_data WHERE system = ?;
    sourceQueryNArgs: 1
    sourceCountQuery: |
      SELECT count(1) as total FROM migration_data WHERE system = ?
    destinationQuery: |
      INSERT INTO migration_data_name (system, name, id, description) VALUES(?,?,?,?)
    destinationQueryNArgs: 0
    transformationScript: |
      var rec = getRecord();
      print("processing id: " + rec.id);
      sendArgs([rec.system, rec.name, rec.id.toString(), rec.description]);
  cassandra_to_cassandra_using_collector:
    component:
      kind: Migration
      name: Cassandra to Cassandra using Collector
      machineName: cassandra_to_cassandra_using_collector
      description: Get name from migration_name and get their ids with collector.
    sourceDb: cassandra_dev
    destinationDb: cassandra_dev
    sourceQuery: |
      SELECT system, name FROM migration_name WHERE system = ?;
    sourceQueryNArgs: 1
    sourceCountQuery: |
      SELECT count(1) as total FROM migration_name WHERE system = ?;
    destinationQuery: |
      UPDATE migration_sets SET ids = ? WHERE system = ? AND name = ?
    destinationQueryNArgs: 0
    transformationScript: |
      // todo: run data collector for each record returned from source, set record and arts
      var rec = getRecord();
      print("rec.system = " + rec.system)
      print("rec.name = " + rec.name)
      var res = run("collect_by_name", [rec.system, rec.name]);
      //var collection = res.DestinationDriver.GetCollection();
      dump(res)
  cassnadra_to_cassandra_name_lookup:
    component:
      kind: Migration
      name: Cassnadra to Cassandra Name Lookup
      machineName: cassnadra_to_cassandra_name_lookup
      description: Migrate data from migration_data to migration_name to make a table
        of unique names.
    sourceDb: cassandra_dev
    destinationDb: cassandra_dev
    sourceQuery: |
      SELECT name, system FROM migration_data WHERE system = ?
    sourceQueryNArgs: 1
    sourceCountQuery: |
      SELECT count(1) as total FROM migration_data WHERE system = ?
    destinationQuery: |
      UPDATE migration_name SET b64enc = '{{.name | b64enc}}', sha256sum = '{{.name | sha256sum}}' WHERE system = ? AND name = ?
    destinationQueryNArgs: 0
    transformationScript: |
      var rec = getRecord();
      // if you need to dump(rec); do it?
      sendArgs([rec.system,rec.name]);
  collect_by_name:
    component:
      kind: Migration
      name: Collect by Name
      machineName: collect_by_name
      description: Collect rows by name.
    sourceDb: cassandra_dev
    destinationDb: names_collector
    sourceQuery: |
      SELECT name, id FROM migration_data_name WHERE system = ? AND name = ?
    sourceQueryNArgs: 2
    sourceCountQuery: |
      SELECT count(1) as total FROM migration_data_name WHERE system = ? AND name = ?
    destinationQuery: ""
    destinationQueryNArgs: 0
    transformationScript: ""
  example_csv_to_cassandra:
    component:
      kind: Migration
      name: Example CSV to Cassandra
      machineName: example_csv_to_cassandra
      description: Load add example data from CSV into Cassandra.
    sourceDb: example_csv_data
    destinationDb: cassandra_dev
    sourceQuery: |
      *
    sourceQueryNArgs: 0
    sourceCountQuery: ""
    destinationQuery: |
      INSERT INTO migration_data JSON '{"system": "example", "id": "{{.id}}", "name": "{{.Name}}", "description": "{{.Description}}"}'
    destinationQueryNArgs: 0
    transformationScript: |
      // Get the current record.
      var rec = getRecord();

      if (rec.id < 3) {
        // Print a generic message.
        print("Im Javascript inside the DMK!");

        // Print some information about the record. Demonstrate access
        // from hash key and access as object attribute.
        print("Record Name" + rec["Name"] + " id: " + rec.id);

        // Modify an attribute of the record
        rec.Name = rec.Name + " from javascript!";

        // Send the record back to DMK
        sendRecord(rec);

        // Get a persistant data store (hash map)
        var storage = getStorage();

        // Initilize a key in the store if it does not exist.
        if (!storage["someval"]) { storage["someval"] = 0 };

        // Modify a value in the store.
        storage["someval"]++;

        // Send store back the DMK
        sendStorage(storage);

        // Print the new value from the data store to deminstrate its
        // persistance.
        print("Someval: " + storage["someval"]);

        // Demonstrate skipping the migration of a record
        // with a conditional.
        if (rec.id == 2) {
          print("Record id is 2 so let's skip it");
          skip();
        }
      }
  example_mysql_to_cassandra:
    component:
      kind: Migration
      name: Example MySql to Cassandra
      machineName: example_mysql_to_cassandra
      description: Get and add example data from MySql to Cassandra.
    sourceDb: mysql_dev
    destinationDb: cassandra_docker_local
    sourceQuery: |
      SELECT * FROM migration_data;
    sourceQueryNArgs: 0
    sourceCountQuery: ""
    destinationQuery: |
      INSERT INTO migration_data JSON '{"id": {{.id}}, "name": "{{.name}}"}'
    destinationQueryNArgs: 0
    transformationScript: ""
tunnels: {}
